[[schedule]]
id = "registration"
title = "Registration"
description = "Doors open at 8 AM. See you there!"
speaker = "GopherCon Singapore Team"
time = "8:00 AM"

[[schedule]]
id = "opening-remarks"
title = "Opening Remarks"
speaker = "GopherCon Singapore Team"
time = "9:00 AM"

[[schedule]]
id = "sau-sheong"
title = "AI Programming with Go"
description = """A short introduction to programming AI using Go. Learn about using Go packages, LLM frameworks, open LLMs using Ollama, RAG and also vision LLMs."""
speaker = "Chang Sau Sheong"
speakerLink = "/speakers#sau-sheong"
time = "9:10 AM"

[[schedule]]
id = "dave-cheney"
title = "Starting and stopping things"
description = """In Go it’s trivia to start a goroutine, but, as I’m fond of saying, do you know when that goroutine will stop? How will it stop it? How will you know when it has stopped?

This is a talk about a solution I find myself rewriting on pretty much every backend Go service I work on. Even in a microservice shop, the requirement to set up a bunch of parallel goroutines is ubiquitous. 

This is a story about concurrency vs parallelism, the places where it exists today in the std lib and where it does not, the patterns that evolve from that statement, and an introduction to the group type, an idea which has evolved since the Juju days a decade ago of William Reade’s Manifold, through Peter Bourgon’s “How I do things” talk, and through many of my own iterations."""
speaker = "Dave Cheney"
speakerLink = "/speakers#dave-cheney"
time = "9:40 AM"

[[schedule]]
id = "am-tea-break"
title = "Tea Break"
speaker = "GopherCon Singapore Team"
time = "10:20 AM"

[[schedule]]
id = "elisa-xu"
title = "(Wrong) Comparison is the Thief of Joy"
description = """You've heard the old adage - comparison is the thief of joy. Indeed it is. But more specifically, wrong comparison is the thief of joy. We compare for a living. We test to see if our expectations match our realities and write hundred of lines of code to compare what we want vs what we got. Yet do we actually know what we are comparing, and what obscure test failures threaten to steal our joy?"""
speaker = "Elisa Xu"
speakerLink = "/speakers#elisa-xu"
time = "10:50 AM"

[[schedule]]
id = "axel-wagner"
title = "Why we can't have nice things: Generic methods"
description = """Generic methods would allow us to write chaining APIs. This is particularly important for functional iterator patterns, which currently have to stretch over multiple lines, or be awkwardly nested. It would also allow us to properly attach generic code to the type it belongs to. An example is `func N[T constraints.Integer](n N) N` in package `rand`: It makes it easier to choose a random `time.Duration`, for example. But it should really be a method on `*rand.Rand`.

So no one really contests that it would be useful to have this feature. Even the Go team largely agrees. But the omission was intentional. The reasons for it stretch all the way back, to even before Go’s first open source release. In fact, it might be the reason we even got generics at all.

I walk through the uses of this feature, the reasons adding generics took so long and how they lead to this omission."""
speaker = "Axel Wagner"
speakerLink = "/speakers#axel-wagner"
time = "11:15 AM"

[[schedule]]
id = "chewxy"
title = "F()-ing Cox-Zucker Tunes a MA Screw unto a Kummer Surface"
description = """Algebraic geometry can be fun in service of world building. This talk will go through the considerations of data structures and algorithms in the pursuit of making movies of exotic mathematical structures that may not necessarily make intuitive sense."""
speaker = "Chew Xuanyi"
speakerLink = "/speakers#chewxy"
time = "11:45 AM"

[[schedule]]
id = "swami"
title = "Scaling Go Monorepo Workflows with Athens"
description = """At Grab, our Go monorepo powers over 600 microservices and centralises shared libraries, but frequently used commands like go list and go get created significant bottlenecks. These commands overwhelmed our GitLab servers, leading to frustrated developers, disrupted CI pipelines, and constant fire-fighting by the GitLab team. To address this, we implemented Athens, a private Go module proxy, combined with GOVCS environment variable configurations and fallback network mode. This approach offloaded dependency-fetching requests from GitLab, drastically reduced server load, and improved dependency-fetching speeds for developers.

In this talk, we’ll explain how using a private Go module proxy enhances security, ensures module availability (think “left-pad” incident), and avoids the downsides of vendoring. Attendees will gain insights into setting up private proxies, using Athens in secure or offline environments, and scaling dependency management in large monorepos. Learn how we improved productivity and reliability at Grab, and discover how your organisation can do the same."""
speaker = "Swaminathan Venkatraman"
speakerLink = "/speakers#swami"
time = "12:15 PM"

[[schedule]]
id = "lunch"
title = "Lunch"
speaker = "GopherCon Singapore Team"
time = "12:40 PM"

[[schedule]]
id = "adrian-cole"
title = "Practical GenAI with Go"
description = """Learn how to practice Generative AI in Golang, using some popular tools written in Golang. You’ll learn the lingo needed commonly used, like LLM, GenAI, RAG and VectorDB and what they mean. You’ll leave with some ideas on how to start coding, now, with a model hosted on your laptop!"""
speaker = "Adrian Cole"
speakerLink = "/speakers#adrian-cole"
time = "1:40 PM"

[[schedule]]
id = "manuel-de-la-pena"
title = "Testing GenAI applications in Go"
description = """The evolution of GenAI applications brings with it the challenge of developing testing methods that can effectively evaluate the complexity and subtlety of responses generated by advanced artificial intelligences.

The proposal to use an LLM as a Validator Agent represents a promising approach, paving the way towards a new era of software development and evaluation in the field of artificial intelligence. Over time, we hope to see more innovations that allow us to overcome the current challenges and maximize the potential of these transformative technologies.

This proposal involves defining detailed validation criteria and using an LLM as an “Evaluator” to determine if the responses meet the specified requirements. This approach can be applied to validate answers to specific questions, drawing on both general knowledge and especialised information. By incorporating detailed instructions and examples, an Evaluator can provide accurate and justified evaluations, offering clarity on why a response is considered correct or incorrect.

In this session we’ll leverage langchaingo to interact with LLMs, and Testcontainers Go to provision the runtime dependencies to use RAG."""
speaker = "Manuel de la Peña"
speakerLink = "/speakers#manuel-de-la-pena"
time = "2:05 PM"

[[schedule]]
id = "bjorn-andersson"
title = "Mocking your codebase without cursing it"
description = """Working with mocks is a lot like working out: if you don't know what you're doing then you'll either a) don't get the results you want or b) hurt yourself. And in the worst case, you'll get both and be unhappy with the results and swear off mocking as a useless practice.

This talk will show some common pitfalls of using mocks (updating a lot of mocks to return the new correct value, mocking out the same complex thing again and again, elaborate setups to exercise a piece of business logic, and more) and how you can constrain how you work with mocks to make them work for you and make your test suite something you'll love to maintain.

No matter where you are on the spectrum of "mock everything to don't mock at all," you'll get more confidence in your test suite, make it simpler to maintain, and very likely faster to run by being intentional in how you design your test suite and work with mocks."""
speaker = "Björn Andersson"
speakerLink = "/speakers#bjorn-andersson"
time = "2:30 PM"

[[schedule]]
id = "pm-tea-break"
title = "Tea Break"
speaker = "GopherCon Singapore Team"
time = "2:55 PM"

[[schedule]]
id = "korn-lamida"
title = "80% faster, 70% less memory: the Go tricks we've used to build a high-performance, low-cost Prometheus query engine"
description = """We’ve been building a brand-new, Prometheus-compatible query engine from the ground up for Grafana Mimir in Go.

Our new query engine has been designed to deliver an improved user experience and vastly improved performance: our benchmarks show queries running up to 80% faster and with 70% lower peak memory consumption than Prometheus’ default engine, and our real-world testing shows similar results.

As we’ve been building the engine, we’ve learnt a number of Go performance lessons the hard way, including why using byte slices can sometimes be preferable to strings, the benefits and costs of memory pooling and the surprisingly large impact of function pointers. And we’ve seen the complexity (and bugs!) these things can introduce too, and developed a number of techniques to help combat this."""
speaker = "Charles Korn and Jon Kartago Lamida"
speakerLink = "/speakers#charles-korn"
time = "3:30 PM"

[[schedule]]
id = "ron-evans"
title = "Life, the Universe, and everything GO"
description = """In this fast-paced interactive keynote, we will Go from the incredibly small to as far as our imaginations can take us.

By the end you will have shared a true 'out of the box' experience."""
speaker = "Ron Evans"
speakerLink = "/speakers#ron-evans"
time = "3:55 PM"

[[schedule]]
id = "closing-remarks"
title = "Closing Remarks & Group Photo"
speaker = "GopherCon Singapore Team"
time = "4:45 PM"
